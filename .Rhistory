# For this project the performance will be meansure by: Produced Lenght Between Failures.
# To be able to calculate this performance, it's important discard failures registers that don't have production
# registers.
# Removing registers from the failures set which don't have production registers.
registers <- as.vector(unlist(production$ID))
failures <- failures %>% filter(ID %in% registers)
# Merging productions and failures data sets by ID
colnames(failures)
production_failures <- merge(production, failures[, c(2, 6:45)], by = 'ID', all = T)
colnames(production_failures)
production_failures[, c(29:47)][is.na(production_failures[, c(29:47)])] <- 0
# Calculating the performance
production_failures <- production_failures %>%
mutate(PERFORMANCE = if_else(TOTAL == 0, LENGHT, LENGHT / TOTAL))
# MEAN OF PERFORMANCE BEFORE AND AFTER
ggplot(distinct(production_failures %>%
group_by(VERSION) %>%
mutate(PERFORMANCE = mean(PERFORMANCE)) %>%
select(VERSION, PERFORMANCE),
VERSION, .keep_all = T)) +
geom_col(aes(x = VERSION, y = PERFORMANCE), fill = 'lightblue', color = 'darkblue', alpha = 0.7) +
ggtitle('MEAN OF PERFORMANCE BEFORE AND AFTER MODIFICATIONS') +
theme(plot.title = element_text(vjust = 0.5, hjust = 0.5, face = 'bold'))
# Function to plot the comparisons of performance between before and after
compare_performances <- function(df, variable){
target <- parse_quosure(variable) #quo
# Listing the occurrences of variable to be compared
list_to_compare <- c(df[, variable])
# Calcutaing the angle of text of axis x
if(length(list_to_compare) > 10){
angle_x <- 90
} else {
angle_x <- 0
}
sapply(list_to_compare, function(x){
before = ggplot(df) +
geom_col(aes(x = !!target, y = BEFORE), fill = 'lightblue', color = 'darkblue', alpha = 0.7) +
ggtitle(paste('PERFORMANCE BY ',
variable,
' BEFORE CHANGES',
sep = '')) +
theme(plot.title = element_text(vjust = 0.5, hjust = 0.5, face = 'bold'),
axis.text.x = element_text(angle = angle_x)) +
ylim(0, if_else(max(df$BEFORE) > max(df$AFTER), max(df$BEFORE), max(df$AFTER)))
after = ggplot(df) +
geom_col(aes(x = !!target, y = AFTER), fill = 'lightblue', color = 'darkblue', alpha = 0.7) +
ggtitle(paste('PERFORMANCE By ',
variable,
' AFTER CHANGES',
sep = '')) +
theme(plot.title = element_text(vjust = 0.5, hjust = 0.5, face = 'bold'),
axis.text.x = element_text(angle = angle_x)) +
ylim(0, if_else(max(df$BEFORE) > max(df$AFTER), max(df$BEFORE), max(df$AFTER)))
grid.arrange(before, after, ncol = 2)
})
}
# MEAN OF PERFORMANCE BEFORE AND AFTER BY PRODUCT
product_performance <- dcast(distinct(production_failures %>%
group_by(PRODUCT, VERSION) %>%
mutate(PERFORMANCE = mean(PERFORMANCE)) %>%
select(PRODUCT, VERSION, PERFORMANCE),
PRODUCT, VERSION, PERFORMANCE, .keep_all = T),
PRODUCT ~ VERSION)
# Replacing NA values with 0
product_performance[is.na(product_performance)] <- 0
# Calculating the evolution of performance for products that was produced both before and after changes
product_performance <- product_performance %>%
mutate(DIF_PERFORMANCE = if_else(BEFORE == 0 | AFTER == 0, 0, AFTER - BEFORE),
STATUS_EVOLUTION = if_else(DIF_PERFORMANCE > 0, 1, -1))
# Plotting the performances
compare_performances(product_performance, 'PRODUCT')
# Checking the evolution between products
ggplot(product_performance %>% filter(DIF_PERFORMANCE != 0)) +
geom_col(aes(x = PRODUCT,
y = DIF_PERFORMANCE,
fill = factor(STATUS_EVOLUTION, labels = c('Worse', 'Better'))), alpha = 0.5) +
ggtitle('EVOLUTION OF PERFORMANCE BY PRODUCT') +
labs(fill = 'Situation') +
geom_text(aes(x = PRODUCT, y = DIF_PERFORMANCE, label = round(DIF_PERFORMANCE, 2)), vjust = -0.5, size = 3) +
theme(plot.title = element_text(vjust = 0.5, hjust = 0.5, face = 'bold'),
legend.position = 'bottom',
legend.title = element_text(face = 'bold'))
# Between the products with production before and after, only TYPE A got worse.
# List of products which has gotten worse
worse_products <- as.vector(unlist(product_performance %>% filter(DIF_PERFORMANCE < 0) %>% select(PRODUCT)))
# List of products which has improved
best_products <- as.vector(unlist(product_performance %>% filter(DIF_PERFORMANCE > 0) %>% select(PRODUCT)))
# MEAN OF PERFORMANCE BEFORE AND AFTER BY MACHINE
machine_performance <- dcast(distinct(production_failures %>%
group_by(MACHINE, VERSION) %>%
mutate(PERFORMANCE = mean(PERFORMANCE)) %>%
select(MACHINE, VERSION, PERFORMANCE),
MACHINE, VERSION, PERFORMANCE, .keep_all = T),
MACHINE ~ VERSION)
# Replacing NA values with 0
machine_performance[is.na(machine_performance)] <- 0
# Calculating the evolution of performance for machines that was produced both before and after changes
machine_performance <- machine_performance %>%
mutate(DIF_PERFORMANCE = if_else(BEFORE == 0 | AFTER == 0, 0, AFTER - BEFORE),
STATUS_EVOLUTION = if_else(DIF_PERFORMANCE > 0, 1, -1))
# Plotting the performances
compare_performances(machine_performance, 'MACHINE')
# Checking the evolution between machines
ggplot(machine_performance %>% filter(DIF_PERFORMANCE != 0)) +
geom_col(aes(x = MACHINE,
y = DIF_PERFORMANCE,
fill = factor(STATUS_EVOLUTION, labels = c('Worse', 'Better'))), alpha = 0.5) +
ggtitle('EVOLUTION OF PERFORMANCE BY MACHINE') +
labs(fill = 'Situation') +
geom_text(aes(x = MACHINE, y = DIF_PERFORMANCE, label = round(DIF_PERFORMANCE, 2)), vjust = -0.5, size = 3) +
theme(plot.title = element_text(vjust = 0.5, hjust = 0.5, face = 'bold'),
legend.position = 'bottom',
legend.title = element_text(face = 'bold'))
# Between the machines with production before and after, three of them got worse: BA_13, BA_14, CA_06 and DT_12.
# But for the whole department, the most machines improved.
# List of machines which has gotten worse
worse_machines <- as.vector(unlist(machine_performance %>% filter(DIF_PERFORMANCE < 0) %>% select(MACHINE)))
# List of machines which has improved
best_machines <- as.vector(unlist(machine_performance %>% filter(DIF_PERFORMANCE > 0) %>% select(MACHINE)))
# Checking what machines have produced the worse products
demand_by_machine_worse_products <- dcast(distinct(production_failures %>%
filter(PRODUCT %in% worse_products) %>%
group_by(PRODUCT, MACHINE, VERSION) %>%
mutate(PRODUCTION = sum(LENGHT)) %>%
select(PRODUCT, MACHINE, VERSION, PRODUCTION),
MACHINE, VERSION, .keep_all = T),
MACHINE + PRODUCT ~ VERSION)
demand_by_machine_worse_products[is.na(demand_by_machine_worse_products)] <- 0
demand_by_machine_worse_products %>% mutate(DIF_DEMAND = if_else(BEFORE > AFTER, 'REDUCED', 'INCREASED'))
# As checked above, all the machines that produced the worse products have reduced the demand.
# There are at least two basic conclusions:
# 1st: The machines have not to do with the descreasement of the mean of performance
# 2nd: As less is produced as more failures occur
# To test this sencond one, it's important to check if the demand by machine of the best products have
# increased.
demand_by_machine_best_products <- dcast(distinct(production_failures %>%
filter(PRODUCT %in% best_products) %>%
group_by(PRODUCT, MACHINE, VERSION) %>%
mutate(PRODUCTION = sum(LENGHT)) %>%
select(PRODUCT, MACHINE, VERSION, PRODUCTION),
MACHINE, VERSION, .keep_all = T),
MACHINE + PRODUCT ~ VERSION)
demand_by_machine_best_products[is.na(demand_by_machine_best_products)] <- 0
demand_by_machine_best_products <- demand_by_machine_best_products %>%
mutate(DIF_DEMAND = if_else(BEFORE > AFTER, 'REDUCED', 'INCREASED'))
table(demand_by_machine_best_products$DIF_DEMAND)
# In general, the most cases show that the demand has decreased.
# But to assume it's true, it's important to measure the diference of lenght mean.
demand_by_machine_best_products <- dcast(distinct(production_failures %>%
filter(PRODUCT %in% best_products) %>%
group_by(PRODUCT, MACHINE, ID, VERSION) %>%
mutate(PRODUCTION = mean(LENGHT)) %>%
select(PRODUCT, MACHINE, ID, VERSION, PRODUCTION),
MACHINE, VERSION, .keep_all = T),
MACHINE + ID + PRODUCT ~ VERSION)
demand_by_machine_best_products
# Calculating the difference bettwen leght mean before and after
mean(demand_by_machine_best_products$AFTER, na.rm = T)-mean(demand_by_machine_best_products$BEFORE, na.rm = T)
# Even it's show that the products incresead the lenght by unit, 62 meters aren't enough to affirm that
# the lenght has impact to the number of failures.
# To finally verify if there are a true correlation between the increasement of length and the decreasement of
# failure occurrences, it's being ploted the scatter plot, and the test of correlation.
View(head(product_performance))
# Even it's show that the products incresead the lenght by unit, 62 meters aren't enough to affirm that
# the lenght has impact to the number of failures.
# To finally verify if there are a true correlation between the increasement of length and the decreasement of
# failure occurrences, it's being ploted the scatter plot, and the test of correlation.
View(head(production_failures))
# Even it's show that the products incresead the lenght by unit, 62 meters aren't enough to affirm that
# the lenght has impact to the number of failures.
# To finally verify if there are a true correlation between the increasement of length and the decreasement of
# failure occurrences, it's being ploted the scatter plot, and the test of correlation.
colnames(production_failures)
ggplot(production_failures) +
geom_point(aes(x = LENGHT, y = TOTAL))
ggplot(production_failures) +
geom_point(aes(x = LENGTH, y = TOTAL)) +
ggtitle('TOTAL OF FAILURES BY LENGTH')
setwd('C:/FCD/BigDataRAzure/Projetos/Failures/')
setwd('C:\FCD\BigDataRAzure\Projetos\Parametric_Hypothesis_with_R/')
setwd('C:/FCD/BigDataRAzure/Projetos/Parametric_Hypothesis_with_R')
# Loading the packages
library(readxl)
library(dplyr)
library(ggplot2)
library(data.table)
library(gridExtra)
library(rlang)
library(stringr)
# Loading the file
# Checking the sheets
excel_sheets('failures.xlsm')
# Failures
failures <- read_excel('failures.xlsm', sheet = 'FAILURES', skip = 2)
production <- read_excel('failures.xlsm', sheet = 'PRODUCTION', skip = 2)
# Preparing the dataset
# Checking the type of variables
str(failures)
# Setting failures$MACHINE as categorical
failures$MACHINE <- as.factor(failures$MACHINE)
# Setting production$MACHINE and production$VERSION as categorical
production$MACHINE <- as.factor(production$MACHINE)
# Replacing VERSION NAs with 0
production$VERSION[is.na(production$VERSION)] <- 0
production$VERSION <- as.factor(production$VERSION)
# Setting 0 as BEFORE and 1 as AFTER
levels(production$VERSION) <- c('BEFORE', 'AFTER')
# To standardize the ID of failures set, it's only needed to remove the letter from the end of the ID
failures_original <- failures
failures$ID <- gsub('\\D$', '', failures$ID)
# PERFOMANCE ANALYSES
# Considering that the current situation regards to the failures of a production, it's important to consider
# relational metrics intead of absolute: Perfomance instead of Production or Failures.
# The performance metric that will be chosen is an adaptation of MTBF (Mean Tima Between Failures) concept.
# For this project the performance will be measure by: Produced Length Between Failures.
# To be able to calculate this performance, it's important to discard failures registers that don't have
# production registers.
# Removing registers from the failures set which don't have production registers.
registers <- as.vector(unlist(production$ID))
failures <- failures %>% filter(ID %in% registers)
production_failures <- merge(production, failures[, c(2, 6:45)], by = 'ID', all = T)
colnames(production_failures)
production_failures[, c(29:47)][is.na(production_failures[, c(29:47)])] <- 0
# Calculating the performance
production_failures <- production_failures %>%
mutate(PERFORMANCE = if_else(TOTAL == 0, LENGTH, LENGTH / TOTAL))
# Loading the file
# Checking the sheets
excel_sheets('failures.xlsm')
# Failures
failures <- read_excel('failures.xlsm', sheet = 'FAILURES', skip = 2)
production <- read_excel('failures.xlsm', sheet = 'PRODUCTION', skip = 2)
# Preparing the dataset
# Checking the type of variables
str(failures)
# Setting failures$MACHINE as categorical
failures$MACHINE <- as.factor(failures$MACHINE)
# Setting production$MACHINE and production$VERSION as categorical
production$MACHINE <- as.factor(production$MACHINE)
# Replacing VERSION NAs with 0
production$VERSION[is.na(production$VERSION)] <- 0
production$VERSION <- as.factor(production$VERSION)
# Setting 0 as BEFORE and 1 as AFTER
levels(production$VERSION) <- c('BEFORE', 'AFTER')
# To standardize the ID of failures set, it's only needed to remove the letter from the end of the ID
failures_original <- failures
failures$ID <- gsub('\\D$', '', failures$ID)
# PERFOMANCE ANALYSES
# Considering that the current situation regards to the failures of a production, it's important to consider
# relational metrics intead of absolute: Perfomance instead of Production or Failures.
# The performance metric that will be chosen is an adaptation of MTBF (Mean Tima Between Failures) concept.
# For this project the performance will be measure by: Produced Length Between Failures.
# To be able to calculate this performance, it's important to discard failures registers that don't have
# production registers.
# Removing registers from the failures set which don't have production registers.
registers <- as.vector(unlist(production$ID))
failures <- failures %>% filter(ID %in% registers)
production_failures <- merge(production, failures[, c(2, 6:45)], by = 'ID', all = T)
production_failures[, c(29:47)][is.na(production_failures[, c(29:47)])] <- 0
# Calculating the performance
production_failures <- production_failures %>%
mutate(PERFORMANCE = if_else(TOTAL == 0, LENGTH, LENGTH / TOTAL))
# Checking the occurrences of each failure before the changes
num_failures_before = production_failures[, c(7, 28:46)] %>% filter(VERSION == 'BEFORE')
num_failures_before[is.na(num_failures_before)] <- 0
num_failures_before <- num_failures_before[, -1]
num_failures_before <- data.frame(cbind(
FAILURES = as.factor(gsub('_', '', colnames(production_failures[, c(28:46)]))),
FREQUENCY = apply(num_failures_before, 2, sum)))
num_failures_before <- num_failures_before[order(-num_failures_before$FREQUENCY),]
num_failures_before <- num_failures_before %>% mutate(
CUM_FAILURES = cumsum(FREQUENCY),
CUM_PERC = round((CUM_FAILURES / sum(FREQUENCY) * 100), 2)
)
# Plotting the occurrences
ggplot(num_failures_before, aes(x = reorder(FAILURES, -FREQUENCY))) +
geom_col(aes(y = FREQUENCY), fill = 'lightblue', color = 'darkblue', alpha = 0.7, group = 1) +
ggtitle('FREQUENCY OF FAILURES BEFORE THE CHANGES') +
geom_line(aes(y = CUM_PERC*264/100), group = 2, color = 'darkred') +
geom_point(aes(y = CUM_PERC*264/100), group = 2, shape = 21, color = 'darkred', fill = 'darkred', size = 2) +
geom_text(aes(y = CUM_PERC*264/100, label = paste(CUM_PERC, '%', sep = '')), vjust = -1, size = 3) +
scale_y_continuous(sec.axis = sec_axis(~.*100/264, name = 'Cumulative percentage'), limits = c(0, 264)) +
theme(plot.title = element_text(vjust = 0.5, hjust = 0.5, face = 'bold'))
View(num_failures_before)
# Plotting the occurrences
ggplot(num_failures_before, aes(x = reorder(FAILURES, -CUM_FAILURES))) +
geom_col(aes(y = FREQUENCY), fill = 'lightblue', color = 'darkblue', alpha = 0.7, group = 1) +
ggtitle('FREQUENCY OF FAILURES BEFORE THE CHANGES') +
geom_line(aes(y = CUM_PERC*264/100), group = 2, color = 'darkred') +
geom_point(aes(y = CUM_PERC*264/100), group = 2, shape = 21, color = 'darkred', fill = 'darkred', size = 2) +
geom_text(aes(y = CUM_PERC*264/100, label = paste(CUM_PERC, '%', sep = '')), vjust = -1, size = 3) +
scale_y_continuous(sec.axis = sec_axis(~.*100/264, name = 'Cumulative percentage'), limits = c(0, 264)) +
theme(plot.title = element_text(vjust = 0.5, hjust = 0.5, face = 'bold'))
# Plotting the occurrences
ggplot(num_failures_before, aes(x = reorder(FAILURES, CUM_FAILURES))) +
geom_col(aes(y = FREQUENCY), fill = 'lightblue', color = 'darkblue', alpha = 0.7, group = 1) +
ggtitle('FREQUENCY OF FAILURES BEFORE THE CHANGES') +
geom_line(aes(y = CUM_PERC*264/100), group = 2, color = 'darkred') +
geom_point(aes(y = CUM_PERC*264/100), group = 2, shape = 21, color = 'darkred', fill = 'darkred', size = 2) +
geom_text(aes(y = CUM_PERC*264/100, label = paste(CUM_PERC, '%', sep = '')), vjust = -1, size = 3) +
scale_y_continuous(sec.axis = sec_axis(~.*100/264, name = 'Cumulative percentage'), limits = c(0, 264)) +
theme(plot.title = element_text(vjust = 0.5, hjust = 0.5, face = 'bold'))
# Checking the occurrences of each failure after the changes
num_failures_after = production_failures[, c(7, 28:46)] %>% filter(VERSION == 'AFTER')
num_failures_after[is.na(num_failures_after)] <- 0
num_failures_after <- num_failures_after[, -1]
num_failures_after <- data.frame(cbind(
FAILURES = as.factor(gsub('_', '', colnames(production_failures[, c(28:46)]))),
FREQUENCY = apply(num_failures_after, 2, sum)))
num_failures_after <- num_failures_after[order(-num_failures_after$FREQUENCY),]
num_failures_after <- num_failures_after %>% mutate(
CUM_FAILURES = cumsum(FREQUENCY),
CUM_PERC = round((CUM_FAILURES / sum(FREQUENCY) * 100), 2)
)
# Plotting the occurrences
ggplot(num_failures_after, aes(x = reorder(FAILURES, -FREQUENCY))) +
geom_col(aes(y = FREQUENCY), fill = 'lightblue', color = 'darkblue', alpha = 0.7, group = 1) +
ggtitle('FREQUENCY OF FAILURES AFTER THE CHANGES') +
geom_line(aes(y = CUM_PERC*61/100), group = 2, color = 'darkred') +
geom_point(aes(y = CUM_PERC*61/100), group = 2, shape = 21, color = 'darkred', fill = 'darkred', size = 2) +
geom_text(aes(y = CUM_PERC*61/100, label = paste(CUM_PERC, '%', sep = '')), vjust = -1, size = 3) +
scale_y_continuous(sec.axis = sec_axis(~.*100/61, name = 'Cumulative percentage'), limits = c(0, 61)) +
theme(plot.title = element_text(vjust = 0.5, hjust = 0.5, face = 'bold'))
# MEAN OF PERFORMANCE BEFORE AND AFTER
ggplot(distinct(production_failures %>%
group_by(VERSION) %>%
mutate(PERFORMANCE = mean(PERFORMANCE)) %>%
select(VERSION, PERFORMANCE),
VERSION, .keep_all = T)) +
geom_col(aes(x = VERSION, y = PERFORMANCE), fill = 'lightblue', color = 'darkblue', alpha = 0.7) +
ggtitle('MEAN OF PERFORMANCE BEFORE AND AFTER MODIFICATIONS') +
theme(plot.title = element_text(vjust = 0.5, hjust = 0.5, face = 'bold'))
# As expected, the mean of performance after modifications is higher than before
# Function to plot the comparisons of performance between before and after
compare_performances <- function(df, variable){
target <- parse_quosure(variable) #quo
# Listing the occurrences of variable to be compared
list_to_compare <- as.vector(df[, variable])
lapply(list_to_compare, function(x){
before = ggplot(df %>% filter(!!target == x), aes(x = !!target)) +
geom_col(aes(y = BEFORE), fill = 'lightblue', color = 'darkblue', alpha = 0.7) +
ggtitle('PERFORMANCE BEFORE CHANGES') +
geom_text(aes(y = BEFORE, label = round(BEFORE)), vjust = -0.5, size = 3) +
theme(plot.title = element_text(vjust = 0.5, hjust = 0.5, face = 'bold')) +
ylim(0, if_else(max(df$BEFORE) > max(df$AFTER), max(df$BEFORE), max(df$AFTER)))
after = ggplot(df %>% filter(!!target == x), aes(x = !!target)) +
geom_col(aes(y = AFTER), fill = 'lightblue', color = 'darkblue', alpha = 0.7) +
ggtitle('PERFORMANCE AFTER CHANGES') +
geom_text(aes(y = AFTER, label = round(AFTER)), vjust = -0.5, size = 3) +
theme(plot.title = element_text(vjust = 0.5, hjust = 0.5, face = 'bold')) +
ylim(0, if_else(max(df$BEFORE) > max(df$AFTER), max(df$BEFORE), max(df$AFTER)))
grid.arrange(before, after, ncol = 2)
})
}
# MEAN OF PERFORMANCE BEFORE AND AFTER THE CHANGES BY PRODUCT
product_performance <- dcast(distinct(production_failures %>%
group_by(PRODUCT, VERSION) %>%
mutate(PERFORMANCE = mean(PERFORMANCE)) %>%
select(PRODUCT, VERSION, PERFORMANCE),
PRODUCT, VERSION, PERFORMANCE, .keep_all = T),
PRODUCT ~ VERSION)
# Replacing NA values with 0
product_performance[is.na(product_performance)] <- 0
# Calculating the evolution of performance for products that was produced both before and after changes
product_performance <- product_performance %>%
mutate(DIF_PERFORMANCE = if_else(BEFORE == 0 | AFTER == 0, 0, AFTER - BEFORE),
STATUS_EVOLUTION = if_else(DIF_PERFORMANCE > 0, 1, -1))
# Plotting the performances
compare_performances(product_performance, 'PRODUCT')
# Checking the evolution between products
ggplot(product_performance %>% filter(DIF_PERFORMANCE != 0)) +
geom_col(aes(x = PRODUCT,
y = DIF_PERFORMANCE,
fill = factor(STATUS_EVOLUTION, labels = c('Worse', 'Better'))), alpha = 0.5) +
ggtitle('EVOLUTION OF PERFORMANCE BY PRODUCT') +
labs(fill = 'Situation') +
geom_text(aes(x = PRODUCT, y = DIF_PERFORMANCE, label = round(DIF_PERFORMANCE, 2)), vjust = -0.5, size = 3) +
theme(plot.title = element_text(vjust = 0.5, hjust = 0.5, face = 'bold'),
legend.position = 'bottom',
legend.title = element_text(face = 'bold'))
# Between the products with production before and after changes, only TYPE A got worse.
# List of products which has gotten worse
worse_products <- as.vector(unlist(product_performance %>% filter(DIF_PERFORMANCE < 0) %>% select(PRODUCT)))
# List of products which has improved
best_products <- as.vector(unlist(product_performance %>% filter(DIF_PERFORMANCE > 0) %>% select(PRODUCT)))
# MEAN OF PERFORMANCE BEFORE AND AFTER CHANGEs BY MACHINE
machine_performance <- dcast(distinct(production_failures %>%
group_by(MACHINE, VERSION) %>%
mutate(PERFORMANCE = mean(PERFORMANCE)) %>%
select(MACHINE, VERSION, PERFORMANCE),
MACHINE, VERSION, PERFORMANCE, .keep_all = T),
MACHINE ~ VERSION)
# Replacing NA values with 0
machine_performance[is.na(machine_performance)] <- 0
# Calculating the evolution of performance for machines that was produced both before and after changes
machine_performance <- machine_performance %>%
mutate(DIF_PERFORMANCE = if_else(BEFORE == 0 | AFTER == 0, 0, AFTER - BEFORE),
STATUS_EVOLUTION = if_else(DIF_PERFORMANCE > 0, 1, -1))
# Plotting the performances
compare_performances(machine_performance, 'MACHINE')
# Checking the evolution between machines
ggplot(machine_performance %>% filter(DIF_PERFORMANCE != 0)) +
geom_col(aes(x = MACHINE,
y = DIF_PERFORMANCE,
fill = factor(STATUS_EVOLUTION, labels = c('Worse', 'Better'))), alpha = 0.5) +
ggtitle('EVOLUTION OF PERFORMANCE BY MACHINE') +
labs(fill = 'Situation') +
geom_text(aes(x = MACHINE, y = DIF_PERFORMANCE, label = round(DIF_PERFORMANCE, 2)), vjust = -0.5, size = 3) +
theme(plot.title = element_text(vjust = 0.5, hjust = 0.5, face = 'bold'),
legend.position = 'bottom',
legend.title = element_text(face = 'bold'))
# Between the machines with production before and after changes, three of them got worse: BA_13,
# BA_14, CA_06 and DT_12.
# But for the whole department, the most machines improved.
# List of machines which has gotten worse
worse_machines <- as.vector(unlist(machine_performance %>% filter(DIF_PERFORMANCE < 0) %>% select(MACHINE)))
# List of machines which has improved
best_machines <- as.vector(unlist(machine_performance %>% filter(DIF_PERFORMANCE > 0) %>% select(MACHINE)))
# Checking what machines have produced the worse products
demand_by_machine_worse_products <- dcast(distinct(production_failures %>%
filter(PRODUCT %in% worse_products) %>%
group_by(PRODUCT, MACHINE, VERSION) %>%
mutate(PRODUCTION = sum(LENGTH)) %>%
select(PRODUCT, MACHINE, VERSION, PRODUCTION),
MACHINE, VERSION, .keep_all = T),
MACHINE + PRODUCT ~ VERSION)
demand_by_machine_worse_products[is.na(demand_by_machine_worse_products)] <- 0
demand_by_machine_worse_products %>% mutate(DIF_DEMAND = if_else(BEFORE > AFTER, 'REDUCED', 'INCREASED'))
# As checked above, all the machines that produced the worse products have reduced the demand.
# There are at least two basic conclusions:
# 1st: The machines have not to do with the descreasement of the mean of performance
# 2nd: As shorter the products are, as more it's fails
# To test this second one, it's important to check if the demand by machine of the best products have
# increased.
demand_by_machine_best_products <- dcast(distinct(production_failures %>%
filter(PRODUCT %in% best_products) %>%
group_by(PRODUCT, MACHINE, VERSION) %>%
mutate(PRODUCTION = sum(LENGTH)) %>%
select(PRODUCT, MACHINE, VERSION, PRODUCTION),
MACHINE, VERSION, .keep_all = T),
MACHINE + PRODUCT ~ VERSION)
demand_by_machine_best_products[is.na(demand_by_machine_best_products)] <- 0
demand_by_machine_best_products <- demand_by_machine_best_products %>%
mutate(DIF_DEMAND = if_else(BEFORE > AFTER, 'REDUCED', 'INCREASED'))
table(demand_by_machine_best_products$DIF_DEMAND)
# In general, the most cases show that the demand has decreased.
# But to assume it's true, it's important to measure the difference of length mean.
demand_by_machine_best_products <- dcast(distinct(production_failures %>%
filter(PRODUCT %in% best_products) %>%
group_by(PRODUCT, MACHINE, ID, VERSION) %>%
mutate(PRODUCTION = mean(LENGTH)) %>%
select(PRODUCT, MACHINE, ID, VERSION, PRODUCTION),
MACHINE, VERSION, .keep_all = T),
MACHINE + ID + PRODUCT ~ VERSION)
demand_by_machine_best_products
# Calculating the difference between length mean before and after changes.
mean(demand_by_machine_best_products$AFTER, na.rm = T)-mean(demand_by_machine_best_products$BEFORE, na.rm = T)
# Even it's shown that the products have incresead the length by unit, 62 meters aren't enough to affirm that
# the length has impact to the number of failures.
# To finnaly check if there are a correlation between the lenght of products and number of failures, it will be
# calculate the correlation test.
ggplot(production_failures) +
geom_point(aes(x = LENGTH, y = TOTAL), fill = 'lightblue', color = 'darkblue', alpha = 0.7) +
ggtitle('CORRELATION BETWEEN LENGTH OF PRODUCT AND FAILURES OCCURRENCES') +
theme(plot.title = element_text(vjust = 0.5, hjust = 0.5, face='bold'))
cor(production_failures$LENGTH, production_failures$TOTAL, method = c('pearson', 'kendall', 'spearman'))
cor(production_failures$LENGTH, production_failures$TOTAL, method = c('pearson'))
cor(production_failures$LENGTH, production_failures$TOTAL, method = c('kendall', 'spearman'))
cor(production_failures$LENGTH, production_failures$TOTAL, method = c('pearson', 'kendall', 'spearman'))
# Even it's shown that the products have incresead the length by unit, 62 meters aren't enough to affirm that
# the length has impact to the number of failures.
# To finnaly check if there are a correlation between the lenght of products and number of failures, it will be
# calculate the correlation test.
ggplot(production_failures) +
geom_point(aes(x = LENGTH, y = TOTAL), fill = 'lightblue', color = 'darkblue', alpha = 0.7) +
ggtitle('CORRELATION BETWEEN LENGTH OF PRODUCT AND FAILURES OCCURRENCES') +
labs(subtitle = cor.test(production_failures$LENGTH, production_failures$TOTAL, method = c('pearson', 'kendall', 'spearman')))+
theme(plot.title = element_text(vjust = 0.5, hjust = 0.5, face='bold'))
# Even it's shown that the products have incresead the length by unit, 62 meters aren't enough to affirm that
# the length has impact to the number of failures.
# To finnaly check if there are a correlation between the lenght of products and number of failures, it will be
# calculate the correlation test.
ggplot(production_failures) +
geom_point(aes(x = LENGTH, y = TOTAL), fill = 'lightblue', color = 'darkblue', alpha = 0.7) +
ggtitle('CORRELATION BETWEEN LENGTH OF PRODUCT AND FAILURES OCCURRENCES') +
labs(subtitle = cor(production_failures$LENGTH, production_failures$TOTAL, method = c('pearson', 'kendall', 'spearman')))+
theme(plot.title = element_text(vjust = 0.5, hjust = 0.5, face='bold'))
# Even it's shown that the products have incresead the length by unit, 62 meters aren't enough to affirm that
# the length has impact to the number of failures.
# To finnaly check if there are a correlation between the lenght of products and number of failures, it will be
# calculate the correlation test.
ggplot(production_failures) +
geom_point(aes(x = LENGTH, y = TOTAL), fill = 'lightblue', color = 'darkblue', alpha = 0.7) +
ggtitle('CORRELATION BETWEEN LENGTH OF PRODUCT AND FAILURES OCCURRENCES') +
labs(subtitle = paste('Correlation coefficient',
round(cor(production_failures$LENGTH,
production_failures$TOTAL,
method = c('pearson', 'kendall', 'spearman')),2))) +
theme(plot.title = element_text(vjust = 0.5, hjust = 0.5, face='bold'))
# Even it's shown that the products have incresead the length by unit, 62 meters aren't enough to affirm that
# the length has impact to the number of failures.
# To finnaly check if there are a correlation between the lenght of products and number of failures, it will be
# calculate the correlation test.
ggplot(production_failures) +
geom_point(aes(x = LENGTH, y = TOTAL), fill = 'lightblue', color = 'darkblue', alpha = 0.7) +
ggtitle('CORRELATION BETWEEN LENGTH OF PRODUCT AND FAILURES OCCURRENCES') +
labs(subtitle = paste('Correlation coefficient',
round(cor(production_failures$LENGTH,
production_failures$TOTAL,
method = c('pearson', 'kendall', 'spearman')),2))) +
theme(plot.title = element_text(vjust = 0.5, hjust = 0.5, face='bold'),
plot.subtitle = element_text(vjust = 0.5, hjust = 0.5))
